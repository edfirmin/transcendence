# Generated by Django 5.1.1 on 2025-03-13 19:21

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='TourneyPlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField()),
                ('tourney', models.CharField()),
                ('isUser', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=11, unique=True)),
                ('is42stud', models.BooleanField(default=False)),
                ('first_name', models.CharField(default='S/O')),
                ('last_name', models.CharField(default='S/O')),
                ('email', models.CharField(default='S/O')),
                ('profil_pic', models.URLField(default='https://wallpapers-clan.com/wp-content/uploads/2022/08/default-pfp-16.jpg')),
                ('is2FA', models.BooleanField(default=False, null=True)),
                ('mfa_secret', models.CharField(blank=True, max_length=32, null=True)),
                ('win_count', models.BigIntegerField(default=0)),
                ('lose_count', models.BigIntegerField(default=0)),
                ('tourney_win_count', models.BigIntegerField(default=0)),
                ('hangman_score', models.BigIntegerField(default=0)),
                ('hangman_win_count', models.BigIntegerField(default=0)),
                ('hangman_lose_count', models.BigIntegerField(default=0)),
                ('hangman_find_letter', models.BigIntegerField(default=0)),
                ('hangman_miss_letter', models.BigIntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Hangman',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField()),
                ('finded', models.BooleanField(default=False)),
                ('date', models.CharField()),
                ('word_group', models.CharField(default='Normal')),
                ('skin', models.CharField(default='Normal')),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(max_length=15)),
                ('score_left', models.IntegerField(default=0)),
                ('score_right', models.IntegerField(default=0)),
                ('date', models.CharField()),
                ('time', models.BigIntegerField(default=0)),
                ('type', models.CharField(default='Undefined')),
                ('longest_exchange', models.BigIntegerField(default=0)),
                ('shortest_exchange', models.BigIntegerField(default=0)),
                ('map_index', models.IntegerField(default=0)),
                ('design_index', models.IntegerField(default=0)),
                ('is_tourney', models.BooleanField(default=False)),
                ('opponent', models.CharField(default='null')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tourney',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('winner_match1', models.CharField()),
                ('winner_match2', models.CharField()),
                ('winner_match3', models.CharField()),
                ('winner_match4', models.CharField()),
                ('winner_match5', models.CharField()),
                ('winner_match6', models.CharField()),
                ('winner_match7', models.CharField()),
                ('tourney_id', models.CharField(unique=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
